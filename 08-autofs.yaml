---
- hosts: new_odroid
  vars_files:
    - odroid_config.yml
  vars: 
    ansible_facts_mac_address: '{{ ansible_facts["eth0"]["macaddress"] }}'
  tasks:
    - name: Install autofs
      become: yes
      apt:
        name: autofs
    
    - name: Create /etc/auto.master.d/
      become: yes
      file:
          path: /etc/auto.master.d # required. Path to the file being managed.
          state: directory # not required. choices: absent;directory;file;hard;link;touch. If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions. If C(file), the file will NOT be created if it does not exist; see the C(touch) value or the M(copy) or M(template) module if you want that behavior.  If C(link), the symbolic link will be created or changed. Use C(hard) for hardlinks. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).
          
    - name: Add aldebaran file
      become: yes
      blockinfile:
          path: /etc/auto.master.d/aldebaran.autofs
          create: yes
          block: |
            /media/aldebaran /etc/auto.aldebaran --timeout 20

    - name: Add aldebaran mappings
      become: yes
      copy:
          dest: /etc/auto.aldebaran # required. Remote absolute path where the file should be copied to. If I(src) is a directory, this must be a directory too. If I(dest) is a nonexistent path and if either I(dest) ends with "/" or I(src) is a directory, I(dest) is created. If I(src) and I(dest) are files, the parent directory of I(dest) isn't created: the task fails if it doesn't already exist.
          src: /etc/auto.aldebaran # not required. Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.
          force: yes # not required. the default is C(yes), which will replace the remote file when contents are different than the source. If C(no), the file will only be transferred if the destination does not exist.
          
    - name: Allow browse mode
      become: yes
      lineinfile: 
        path: /etc/default/autofs 
        line: 'BROWSE_MODE="yes"'
        create: yes

    - name: Restart autofs
      become: yes
      systemd:
          name: autofs # not required. Name of the service. When using in a chroot environment you always need to specify the full name i.e. (crond.service).
          enabled: true # not required. Whether the service should start on boot. B(At least one of state and enabled are required.)
          state: restarted # not required. choices: reloaded;restarted;started;stopped. C(started)/C(stopped) are idempotent actions that will not run commands unless necessary. C(restarted) will always bounce the service. C(reloaded) will always reload.
          
